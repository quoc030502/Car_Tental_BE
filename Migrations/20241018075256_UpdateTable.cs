// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using basic_api.Data;

#nullable disable

namespace basic_api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241018075256_UpdateTable")]
    partial class UpdateTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("basic_api.Models.Car", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int?>("CarTypeID")
                    .HasColumnType("int")
                    .HasColumnName("car_type_id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<string>("ImageURL")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("image_url");

                b.Property<bool>("IsInUse")
                    .HasColumnType("bit")
                    .HasColumnName("is_in_use");

                b.Property<string>("LicensePlate")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("license_plate");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("name");

                b.Property<int>("PricePerDay")
                    .HasColumnType("int")
                    .HasColumnName("price_per_day");

                b.Property<int>("PricePerHour")
                    .HasColumnType("int")
                    .HasColumnName("price_per_hour");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.HasIndex("CarTypeID");

                b.ToTable("cars");

                b.HasData(
                    new
                    {
                        Id = 1,
                        CarTypeID = 1,
                        CreatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8020),
                        ImageURL = "",
                        IsInUse = false,
                        LicensePlate = "92A-12312",
                        Name = "HYUNDAI ACCENT",
                        PricePerDay = 800000,
                        PricePerHour = 100000,
                        UpdatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8020)
                    },
                    new
                    {
                        Id = 2,
                        CarTypeID = 1,
                        CreatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8020),
                        ImageURL = "",
                        IsInUse = false,
                        LicensePlate = "43A-42256",
                        Name = "KIA CERATO",
                        PricePerDay = 900000,
                        PricePerHour = 120000,
                        UpdatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8020)
                    });
            });

            modelBuilder.Entity("basic_api.Models.CarType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<string>("Detail")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("detail");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("type");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.ToTable("car_types");

                b.HasData(
                    new
                    {
                        Id = 1,
                        CreatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8000),
                        Detail = "An automatic car shifts gears on its own without a manual clutch. It offers a smoother, easier driving experience. Many drivers prefer it for convenience.",
                        Type = "Automatic Car",
                        UpdatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8000)
                    },
                    new
                    {
                        Id = 2,
                        CreatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8000),
                        Detail = "An electric car runs on electricity instead of fuel. It’s eco-friendly and quieter than traditional cars. Many drivers choose it for sustainability.",
                        Type = "Electric Car",
                        UpdatedAt = new DateTime(2024, 10, 18, 7, 52, 56, 162, DateTimeKind.Utc).AddTicks(8000)
                    });
            });

            modelBuilder.Entity("basic_api.Models.Comment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("content");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<int?>("OrderID")
                    .HasColumnType("int")
                    .HasColumnName("order_id");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.HasIndex("OrderID");

                b.ToTable("comments");
            });

            modelBuilder.Entity("basic_api.Models.Coupon", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("Code")
                    .HasColumnType("int")
                    .HasColumnName("code");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<int>("DiscountPercent")
                    .HasColumnType("int")
                    .HasColumnName("discount_percent");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit")
                    .HasColumnName("is_active");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.ToTable("coupons");
            });

            modelBuilder.Entity("basic_api.Models.Image", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<string>("ImageURL")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("image_url");

                b.Property<int?>("OrderID")
                    .HasColumnType("int")
                    .HasColumnName("order_id");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.HasIndex("OrderID");

                b.ToTable("images");
            });

            modelBuilder.Entity("basic_api.Models.Order", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int?>("CarID")
                    .HasColumnType("int")
                    .HasColumnName("car_id");

                b.Property<int?>("CouponID")
                    .HasColumnType("int")
                    .HasColumnName("coupon_id");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<DateTime>("EndDate")
                    .HasColumnType("datetime2")
                    .HasColumnName("end_date");

                b.Property<bool>("IsApproval")
                    .HasColumnType("bit")
                    .HasColumnName("is_approval");

                b.Property<bool>("IsPay")
                    .HasColumnType("bit")
                    .HasColumnName("is_pay");

                b.Property<DateTime>("StartDate")
                    .HasColumnType("datetime2")
                    .HasColumnName("start_date");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.Property<int?>("UserID")
                    .HasColumnType("int")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.HasIndex("CarID");

                b.HasIndex("CouponID");

                b.HasIndex("UserID");

                b.ToTable("orders");
            });

            modelBuilder.Entity("basic_api.Models.Payment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("Amount")
                    .HasColumnType("int")
                    .HasColumnName("amount");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<int?>("OrderID")
                    .HasColumnType("int")
                    .HasColumnName("order_id");

                b.Property<int?>("PunishmentID")
                    .HasColumnType("int")
                    .HasColumnName("punishment_id");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.HasKey("Id");

                b.HasIndex("OrderID")
                    .IsUnique()
                    .HasFilter("[order_id] IS NOT NULL");

                b.HasIndex("PunishmentID")
                    .IsUnique()
                    .HasFilter("[punishment_id] IS NOT NULL");

                b.ToTable("payments");
            });

            modelBuilder.Entity("basic_api.Models.Punishment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("Amount")
                    .HasColumnType("int")
                    .HasColumnName("amount");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<bool>("IsPay")
                    .HasColumnType("bit")
                    .HasColumnName("is_pay");

                b.Property<int?>("OrderID")
                    .HasColumnType("int")
                    .HasColumnName("order_id");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.Property<int?>("UserID")
                    .HasColumnType("int")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.HasIndex("OrderID")
                    .IsUnique()
                    .HasFilter("[order_id] IS NOT NULL");

                b.HasIndex("UserID");

                b.ToTable("punishments");
            });

            modelBuilder.Entity("basic_api.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("created_at");

                b.Property<string>("DrivingLicense")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("driving_license");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("email");

                b.Property<string>("GoogleUID")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("google_uid");

                b.Property<string>("ImageURL")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("image_url");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit")
                    .HasColumnName("is_active");

                b.Property<bool>("IsRent")
                    .HasColumnType("bit")
                    .HasColumnName("is_rent");

                b.Property<bool>("IsVerify")
                    .HasColumnType("bit")
                    .HasColumnName("is_verify");

                b.Property<string>("Password")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("password");

                b.Property<string>("Phone")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("phone");

                b.Property<string>("Role")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("role");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime2")
                    .HasColumnName("updated_at");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("username");

                b.Property<string>("VerifyCode")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("verify_code");

                b.Property<DateTime?>("VerifyCodeExpires")
                    .HasColumnType("datetime2")
                    .HasColumnName("verify_code_expires");

                b.HasKey("Id");

                b.ToTable("users");

                b.HasData(
                    new
                    {
                        Id = 1,
                        DrivingLicense = "",
                        Email = "admin@gmail.com",
                        GoogleUID = "",
                        ImageURL = "",
                        IsActive = true,
                        IsRent = false,
                        IsVerify = true,
                        Password = "AQAAAAIAAYagAAAAEGl3jelov24IEW8Zr037HzEkXVuuOJZCc7t6eVK5/AxxfCNoQANr0rt8kQazCmW0fA==",
                        Phone = "0999999999",
                        Role = "Admin",
                        Username = "Admin",
                        VerifyCode = ""
                    });
            });

            modelBuilder.Entity("basic_api.Models.Car", b =>
            {
                b.HasOne("basic_api.Models.CarType", "CarType")
                    .WithMany("Cars")
                    .HasForeignKey("CarTypeID");

                b.Navigation("CarType");
            });

            modelBuilder.Entity("basic_api.Models.Comment", b =>
            {
                b.HasOne("basic_api.Models.Order", "Order")
                    .WithMany("Comments")
                    .HasForeignKey("OrderID");

                b.Navigation("Order");
            });

            modelBuilder.Entity("basic_api.Models.Image", b =>
            {
                b.HasOne("basic_api.Models.Order", "Order")
                    .WithMany("Images")
                    .HasForeignKey("OrderID");

                b.Navigation("Order");
            });

            modelBuilder.Entity("basic_api.Models.Order", b =>
            {
                b.HasOne("basic_api.Models.Car", "Car")
                    .WithMany("Orders")
                    .HasForeignKey("CarID");

                b.HasOne("basic_api.Models.Coupon", "Coupons")
                    .WithMany("Orders")
                    .HasForeignKey("CouponID");

                b.HasOne("basic_api.Models.User", "User")
                    .WithMany("Orders")
                    .HasForeignKey("UserID")
                    .OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Car");

                b.Navigation("Coupons");

                b.Navigation("User");
            });

            modelBuilder.Entity("basic_api.Models.Payment", b =>
            {
                b.HasOne("basic_api.Models.Order", "Order")
                    .WithOne("Payment")
                    .HasForeignKey("basic_api.Models.Payment", "OrderID");

                b.HasOne("basic_api.Models.Punishment", "Punishment")
                    .WithOne("Payment")
                    .HasForeignKey("basic_api.Models.Payment", "PunishmentID");

                b.Navigation("Order");

                b.Navigation("Punishment");
            });

            modelBuilder.Entity("basic_api.Models.Punishment", b =>
            {
                b.HasOne("basic_api.Models.Order", "Order")
                    .WithOne("Punishment")
                    .HasForeignKey("basic_api.Models.Punishment", "OrderID");

                b.HasOne("basic_api.Models.User", "User")
                    .WithMany("Punishments")
                    .HasForeignKey("UserID");

                b.Navigation("Order");

                b.Navigation("User");
            });

            modelBuilder.Entity("basic_api.Models.Car", b =>
            {
                b.Navigation("Orders");
            });

            modelBuilder.Entity("basic_api.Models.CarType", b =>
            {
                b.Navigation("Cars");
            });

            modelBuilder.Entity("basic_api.Models.Coupon", b =>
            {
                b.Navigation("Orders");
            });

            modelBuilder.Entity("basic_api.Models.Order", b =>
            {
                b.Navigation("Comments");

                b.Navigation("Images");

                b.Navigation("Payment");

                b.Navigation("Punishment");
            });

            modelBuilder.Entity("basic_api.Models.Punishment", b =>
            {
                b.Navigation("Payment");
            });

            modelBuilder.Entity("basic_api.Models.User", b =>
            {
                b.Navigation("Orders");

                b.Navigation("Punishments");
            });
#pragma warning restore 612, 618
        }
    }
}